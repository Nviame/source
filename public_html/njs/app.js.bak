const CONFIG = {
    NODEJS: {
        port: 3344
    },
    MYSQL: {
        host: "localhost",
        user: "nviame_app",
        password: "RB1fr30a",
        database: "nviame"
    },
    MISC: {
        primary_color: '#4C00FF'
    },
    MP: {
        client_id: '8456003364969642',
        client_secret: 'Zb9ejdCsUZk5YjlMinWvYDnXoxomWzF5',
        access_token_test: 'TEST-8456003364969642-103113-0e105765ef24416efcabdf9a27633220-484927268',
        access_token_prod: 'APP_USR-8456003364969642-103113-8bb691be752547ebab5ca625491ab440-484927268',
        public_key_test: 'TEST-13be80f4-544a-4c42-b2e5-00859daeaa98',
        public_key_prod: 'APP_USR-2eeecf88-9656-43a6-ac40-7f01d727595d',
        sandbox: true
    },
    GMAPS: {
        apiKey: 'AIzaSyBrfdSCaNPmklpwWIj5TsT5GQIEaOQD698'
    }
};

const app = require('express')();
const server = require('http').createServer(app);
const options = {};
const io = require('socket.io')(server, options);

const axios = require('axios');

const mp = require("mercadopago");

const NodeGeocoder = require('node-geocoder');

const geocoder = NodeGeocoder({
    provider: 'google',
    apiKey: CONFIG.GMAPS.apiKey
});

var clients = {},
    subscriptions = {
        data: [],
        add: function(s, name, data) {
            if(subscriptions.data.filter(r => r.name == name).length == 0) {
                subscriptions.data.push({
                    socket: s,
                    name: name,
                    data: data
                });
            }
        },
        remove: function(s, name) {
            subscriptions.data = subscriptions.data.filter(r => r.name != name && r.socket.id != s.id);
        },
        trigger: function(name, key, value, info) {
            const row = subscriptions.data.filter(r => r.name == name).shift();
            if(row) {
                console.log('------------------------------------------------------');
                //console.log('subscription trigger', name, key, value, row["data"][key], info, row.data);
                if(
                    typeof row["data"][key] != 'undefined' && 
                    row["data"][key] == value && 
                    typeof info != "undefined"
                ) {
                    console.log('emit [suscription]', {
                        name: row.name,
                        data: info
                    });
                    row.socket.emit('[suscription]', {
                        name: row.name,
                        data: info
                    });
                }
            }
        }
    };

var mysql = require('promise-mysql');

var fAdmin = require("firebase-admin");

var firebaseServiceAccount = require("./nviame-3a5fe-firebase-adminsdk-j2q73-1c68c2cc31.json");
const { type } = require('os');

fAdmin.initializeApp({
    credential: fAdmin.credential.cert(firebaseServiceAccount),
    databaseURL: "https://nviame-3a5fe.firebaseio.com"
});

const fcm = fAdmin.messaging();

mp.configure(CONFIG.MP.sandbox ? {
    sandbox: CONFIG.MP.sandbox,
    access_token: CONFIG.MP.access_token_test
} : {
        access_token: CONFIG.MP.access_token_prod
    });

function sendPushNotification(params) {
    console.log(`\n # sendPushNotification ~ `, params);

    params.ids = params.hasOwnProperty('ids') ? (typeof params.ids == 'object' ? params.ids : [params.ids]) : '*';

    async function send(registrationTokens) {
        console.log('sendPushNotification ~ send ~ ', registrationTokens);
        if (registrationTokens.length == 0) return;
        var data = {};
        if (params.hasOwnProperty('rel')) {
            data.rel = params.rel;
        }
        let message = {
            data: data,
            notification: {
                title: params.title,
                body: params.content,
            },
            style: "inbox",
            android: {
                notification: {
                    icon: 'ic_n',
                    color: CONFIG.MISC.primary_color
                },
            },
            apns: {
                payload: {
                    aps: {
                        badge: 42,
                    },
                },
            },
            tokens: registrationTokens,
        };

        fcm.sendMulticast(message).then(response => {
            response.responses.forEach((r, i) => {
                if(r.success) {
                    console.log('Sent to ', registrationTokens[i]);
                }
                else {
                    console.log('Not sent to ', registrationTokens[i], ' error > ', r.error);
                }
            });
            //console.log(response.successCount + ' messages were sent successfully');
        });
    }

    async function runQuery() {
        let connection;
        var bandSend = false;
        mysql.createConnection(CONFIG.MYSQL).then(conn => {
            connection = conn;
            var query = '';
            if (params.ids === '*') {
                switch (params.rel) {
                    case 'new-shipment':
                        const additionalData = params.additionalData;
                        query = `
                            SELECT
                                u.email 
                            FROM
                                users AS u INNER JOIN users_settings AS s ON u.id = s.user_id 
                            WHERE
                                s.push_new_shipments = 1 AND u.last_location_locality = '${additionalData.start_address.locality}'
                        `;
                        break;
                    default:
                        query = `
                            SELECT
                                email 
                            FROM
                                users
                        `;
                }
            }
            else {
                query = `
                    SELECT
                        email 
                    FROM
                        users 
                    WHERE
                        id IN (?)
                `;
            }
            return query.indexOf('?') != -1 ? connection.query(query, params.ids.join(',')) : connection.query(query);
        }).then(data => {
            if(data.length > 0) {
                let emails = data.map(r => r.email);
                let query = 'SELECT reg_id FROM users_push_reg_ids WHERE email IN (' + emails.map(e => `"${e}"`).join(',') + ') AND enabled = 1';
                bandSend = true;
                return connection.query(query);
            }
            else {
                return connection.query("SELECT 1");
            }
        }).then(data => {
            if(bandSend) {
                let regIds = data.map(r => r.reg_id);
                send(regIds);
            }
            connection.end();
        }).catch(err => {
            console.log('err', err);
            //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
        });
    }

    runQuery();
}

io.on('connection', socket => {
    socket.on('user connect', data => {
        if (typeof data === 'object') {
            clients[data.user.id] = {
                data: data,
                socket_id: socket.id
            };
            socket.broadcast.emit('user status', {
                id: data.user.id,
                status: 'online'
            });
            console.log('\nSocket clients: ', Object.keys(clients));
            console.log(`\nuser connect: ${data.user.id} -> ${data.user.email}`);
        }
    });
    socket.on('offer accepted', data => {
        if (typeof data === 'object') {
            console.log('offer accepted: ', data);
            socket.broadcast.emit('offer accepted', data);
            sendPushNotification({
                ids: data.user.id,
                title: 'Oferta aceptada',
                content: `Tu oferta por $${data.shipment.offer} ha sido aceptada.`
            });
        }
    });
    socket.on('new offer', data => {
        if (typeof data === 'object') {
            console.log('new offer: ', data);
            socket.broadcast.emit('new offer', data);
            sendPushNotification({
                ids: data.shipment.id_user,
                title: 'Nueva oferta',
                content: `${data.user.name} ha ofertado $${data.shipment.offer} por tu envío.`
            });
        }
    });
    socket.on('new shipment', data => {
        if (typeof data === 'object') {
            console.log('new shipment: ', data);
            socket.broadcast.emit('new shipment', data);
            sendPushNotification({
                title: `Nuevo envío disponible`,
                content: `${data.user.name} ha creado un nuevo envío`,
                rel: 'new-shipment',
                additionalData: data.shipment
            });
        }
    });

    socket.on('check payment', data => {
        if (typeof data === 'object') {
            console.log('check payment: ', data);

            async function runQuery() {
                let connection;
                mysql.createConnection(CONFIG.MYSQL).then(conn => {
                    connection = conn;
                    var query = `SELECT * FROM shipments_payments WHERE id_shipment = ${data.id_shipment}`;
                    return connection.query(query);
                }).then(data => {
                    socket.emit('status payment', data.length > 0 ? data[0] : null);
                    connection.end();
                }).catch(err => {
                    console.log('err', err);
                    //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                });
            }
            runQuery();
        }
    });

    socket.on('shipment retired', data => {
        if (typeof data === 'object') {
            console.log('shipment retired: ', data);

            async function runQuery() {
                let connection;
                mysql.createConnection(CONFIG.MYSQL).then(conn => {
                    connection = conn;
                    var query = `UPDATE shipments SET id_status = 3 WHERE id = ${data.id}`;
                    return connection.query(query);
                }).then(data => {
                    socket.emit('shipment retired', {
                        id: data.id
                    });
                    socket.broadcast.emit('shipment retired', {
                        id: data.id
                    });
                    connection.end();
                }).catch(err => {
                    console.log('err', err);
                    //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                });
            }
            runQuery();
        }
    });

    socket.on('shipment travel on', data => {
        if (typeof data === 'object') {
            console.log('shipment travel on: ', data);

            async function runQuery() {
                let connection;
                mysql.createConnection(CONFIG.MYSQL).then(conn => {
                    connection = conn;
                    var query = `UPDATE shipments SET id_status = 4 WHERE id = ${data.id}`;
                    return connection.query(query);
                }).then(data => {
                    socket.emit('shipment travel on', {
                        id: data.id
                    });
                    socket.broadcast.emit('shipment travel on', {
                        id: data.id
                    });
                    connection.end();
                }).catch(err => {
                    console.log('err', err);
                    //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                });
            }
            runQuery();
        }
    });

    socket.on('shipment delivered', data => {
        if (typeof data === 'object') {
            console.log('shipment delivered: ', data);

            async function runQuery() {
                let connection;
                mysql.createConnection(CONFIG.MYSQL).then(conn => {
                    connection = conn;
                    var query = `
                        SELECT
                            s.id_user,
                            IFNULL(u.fullname, u.email) AS deliver
                        FROM
                            shipments AS s
                        INNER JOIN 
                            shipments_offers AS o 
                        ON 
                            s.id = o.id_shipment 
                        INNER JOIN 
                            users AS u
                        ON 
                            o.id_user = u.id
                        WHERE
                            s.id = ${data.id} AND o.accepted_at IS NOT NULL
                    `;
                    return connection.query(query);
                }).then(dataQuery => {
                    if(dataQuery.length > 0) {
                        sendPushNotification({
                            ids: dataQuery[0].id_user,
                            title: 'Paquete entregado',
                            content: `${dataQuery[0].deliver.split('@').shift()} ha entregado tu envío.`
                        });
                    }
                    var query = `UPDATE shipments SET id_status = 5, delivered_at = NOW() WHERE id = ${data.id}`;
                    return connection.query(query);
                }).then(dataQuery => {
                    socket.emit('shipment delivered', {
                        id: data.id
                    });
                    socket.broadcast.emit('shipment delivered', {
                        id: data.id
                    });
                    connection.end();
                }).catch(err => {
                    console.log('err', err);
                    //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                });
            }
            runQuery();
        }
    });

    socket.on('shipment delivered notify', data => {
        if (typeof data === 'object') {
            console.log('shipment delivered notify: ', data);

            async function runQuery() {
                let connection;
                mysql.createConnection(CONFIG.MYSQL).then(conn => {
                    connection = conn;
                    var query = `
                        SELECT
                            s.id_user,
                            IFNULL(u.fullname, u.email) AS deliver
                        FROM
                            shipments AS s
                        INNER JOIN 
                            shipments_offers AS o 
                        ON 
                            s.id = o.id_shipment 
                        INNER JOIN 
                            users AS u
                        ON 
                            o.id_user = u.id
                        WHERE
                            s.id = ${data.id} AND o.accepted_at IS NOT NULL
                    `;
                    return connection.query(query);
                }).then(dataQuery => {
                    if(dataQuery.length > 0) {
                        sendPushNotification({
                            ids: dataQuery[0].id_user,
                            title: 'Notificación de paquete entregado',
                            content: `${dataQuery[0].deliver.split('@').shift()} ha notificado que ha entregado tu envío, ahora deberá notificar a la persona a cargo para que confirme la recepción del mismo, a través del enlace de confirmación que le ha proporcionado.`
                        });
                        socket.emit('shipment delivered notified', {
                            id: data.id
                        });
                    }
                }).catch(err => {
                    console.log('err', err);
                    //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                });
            }
            runQuery();
        }
    });

    socket.on('check user status', data => {
        if (typeof data === 'object') {
            console.log('check user status', data);
            const status = typeof clients[data.id] === 'undefined' ? 'offline' : 'online';
            console.log(data.id, status);
            socket.emit('user status', {
                id: data.id,
                status: status
            });
            socket.broadcast.emit('user status', {
                id: data.id,
                status: status
            });
        }
    });

    socket.on('user position', data => {
        if (typeof data === 'object' && clients.hasOwnProperty(data.id)) {
            var band = false;

            async function f() {
                const latLon = { lat: data.position.latitude, lon: data.position.longitude };

                const res = await geocoder.reverse(latLon);

                //console.log('* geocoder.reverse > ', latLon, res);

                const addressComponents = {
                    locality: res[0].administrativeLevels.level2long,
                    region: res[0].administrativeLevels.level1long,
                    country: res[0].country
                };
                
                /*console.log("\n", new Date().toISOString());
                console.log("---------------------------------");
                console.log(data.id, addressComponents);
                console.log("---------------------------------");*/
                
                async function runQuery() {
                    let connection;
                    mysql.createConnection(CONFIG.MYSQL).then(conn => {
                        connection = conn;
                        var query = `UPDATE users SET last_location_locality = ?, last_location_region = ?, last_location_country = ? WHERE id = ?`;
                        socket.emit('user position address components', {
                            id: data.id,
                            address_components: addressComponents
                        });
                        return connection.query(query, [addressComponents.locality, addressComponents.region, addressComponents.country, data.id]);
                    }).then(data => {
                        connection.end();
                    }).catch(err => {
                        console.log('err', err);
                        //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                    });
                }
                runQuery();
            }

            const cur_time = new Date().getTime();

            if(!clients[data.id].hasOwnProperty('last_position')) {
                clients[data.id].last_position = data.position;
                clients[data.id].last_position_count = 1;
                band = true;
                f();
            }
            else {
                if((cur_time - clients[data.id].last_position.last_updated) > 5000) {
                    clients[data.id].last_position = data.position;
                    clients[data.id].last_position_count++;
                    band = true;
                    if(clients[data.id].last_position_count % 24 == 0) { // Cada 2 minutos (120000 / 5000)
                        f();
                    }
                }
            }

            if(band) {
                //console.log('user position', data.position, data.id);
                subscriptions.trigger('user tracking position', 'id', data.id, data.position);
                socket.broadcast.emit('user position changed', data);

                clients[data.id].last_position.last_updated = cur_time;

                async function runQuery() {
                    let connection;
                    mysql.createConnection(CONFIG.MYSQL).then(conn => {
                        connection = conn;
                        var query = `UPDATE users SET last_location_lat = ?, last_location_lng = ?, last_location_datetime = ? WHERE id = ?`;
                        return connection.query(query, [data.position.latitude, data.position.longitude, new Date(data.position.timestamp).toISOString().replace('T', ' ').substring(0, 19), data.id]);
                    }).then(data => {
                        connection.end();
                    }).catch(err => {
                        console.log('err', err);
                        //console.log(`${err.code} | ${err.sqlMessage} | ${err.sqlState} | ${err.errno}`);
                    });
                }
                runQuery();
            }
        }
    });

    socket.on('mp payment methods', () => {
        console.log('mp payment methods');
        axios.get('https://api.mercadopago.com/v1/payment_methods', {
            params: {
                access_token: CONFIG.MP.sandbox ? CONFIG.MP.access_token_test : CONFIG.MP.access_token_prod
            }
        }).then(function (response) {
            //console.log(response.statusText, response.status, response.data);
            if(response.statusText == "OK") {
                const paymentMethods = response.data.filter(r => (r.status == 'active' && r.payment_type_id == 'credit_card'));
                socket.emit('mp payment methods', paymentMethods);
            }
            else {

            }
        }).catch(function (error) {
            console.log(error);
        }).then(function () {
            // always executed
        });
    });

    socket.on('mp user cards', (data) => {
        console.log('mp user cards', data);
        mp.customers.search({
            qs: {
              "email": data.email
            }
        }).then(function(res) {
            if(res.response.results.length > 0) {
                socket.emit('mp user cards', res.response.results[0].cards);
            }
            else {
                socket.emit('mp user cards', []);
            }
        }).catch(function(err) {
            console.log(err);
        });
    });

    socket.on('mp user info', (data) => {
        console.log('mp user info', data);
        mp.customers.search({
            qs: {
              "email": data.email
            }
        }).then(function(res) {
            if(res.response.results.length > 0) {
                socket.emit('mp user info', res.response.results[0]);
                /*res.response.results[0].cards.forEach((c) => {
                    axios.delete(`https://api.mercadopago.com/v1/customers/${res.response.results[0]["id"]}/cards/${c.id}`, {
                        data: {},
                        params: {
                            access_token: CONFIG.MP.sandbox ? CONFIG.MP.access_token_test : CONFIG.MP.access_token_prod
                        }
                    }).then(function (response) {
                        console.log(response.statusText, response.status, response.data);
                    }).catch(function (error) {
                        console.log(error);
                    }).then(function () {
                        // always executed
                    });
                });*/
            }
            else {
                socket.emit('mp user info', []);
            }
        }).catch(function(err) {
            console.log(err);
        });
    });

    socket.on('[suscribe]', data => {
        console.log('[suscribe]', data);
        subscriptions.add(socket, data.name, data.data);
    });

    socket.on('[unsuscribe]', name => {
        console.log('[unsuscribe]', name);
        subscriptions.remove(socket, name);
    });

    socket.on('disconnect', () => {
        var disconnectedUserId = null;
        Object.keys(clients).forEach(function (userId) {
            if (clients[userId].socket_id == socket.id) {
                disconnectedUserId = userId;
            }
        });
        if (disconnectedUserId) {
            delete clients[disconnectedUserId];
            socket.broadcast.emit('user status', {
                id: disconnectedUserId,
                status: 'offline'
            });
            console.log('Socket clients: ', Object.keys(clients).length);
        }
    });
});

server.listen(CONFIG.NODEJS.port, () => {
    console.log('Listening on port: ', CONFIG.NODEJS.port);

    
    /*sendPushNotification({
        ids: [1],
        title: 'Test - Nviame NJS',
        content: `Nviame NJS is running on port ${CONFIG.NODEJS.port}.`
    });*/
    
});